
import random 
from app.server.modules.endpoints.processes import Process
from app.server.modules.endpoints.file_creation_event import File

class Malware:
    """
    A class to model malware
    """
    def __init__(self, name:str, files:dict, paths:list, recon_processes:"list[dict]", 
                   c2_processes:"list[dict]", obfuscation_techniques:list=None) -> None:
        self.name = name
        self.files = []
        self.paths = paths
        self.recon_processes = []
        self.c2_processes = []
        self.obfuscation_techniques = obfuscation_techniques

        self.set_files(files)
        self.set_recon_processes(recon_processes)
        self.set_c2_processes(c2_processes)

    def set_files(self, files_dict):
        from app.server.game_functions import FILES_MALICIOUS_VT_SEED_HASHES

        for file in files_dict:
            filename = file['filename']
            hashes = file.get('hashes', [])
            if not hashes:
                # no hashes were provided, get some from the defaults
                for i in range(3):
                    hash_to_add = FILES_MALICIOUS_VT_SEED_HASHES.pop()
                    hashes.append(hash_to_add)
            self.files.append({'filename': filename, 'hashes': hashes})

    def get_file_hashes(self, filename):
        for file in self.files:
            if file['filename'] == filename:
                return file['hashes']
        return []


    def set_recon_processes(self, processes:"list[dict]") -> None:
        """
        Take a list of recon process names
        set the corresponding File object to the file variable
        """
        for process in processes:
            self.recon_processes.append(
                Malware.get_process_obj(process)
            )

    def set_c2_processes(self, processes:"list[dict]") -> None:
        """
        Take a list of recon process names
        set the corresponding File object to the file variable
        """
        for process in processes:
            self.c2_processes.append(
                Malware.get_process_obj(process)
            )

    def get_implant(self) -> File:
        """
        Returns a file from the malware family
        """
        file = random.choice(self.files)
        return File(
            filename=file["filename"],
            path=random.choice(self.paths)+ file["filename"],
            sha256=random.choice(file["hashes"])
        )

    def get_recon_process(self) -> Process:
        """
        Returns a random recon process
        """
        return random.choice(self.recon_processes)

    def get_c2_process(self, c2_ip: str) -> Process:
        """
        Returns a random C2 process
        Accepts a C2 IP as a parameter so it can be added to the arguments
        """
        from app.server.modules.helpers.obfuscation import obfuscate_string
        # get a Process object from malware
        process = random.choice(self.c2_processes)

        process_commandline = process.process_commandline
        # optionally obfuscate powershell C2 commands (that have an ip or domain)
        if "ip_address" in process_commandline \
            or "domain_name" in process_commandline \
            and "powershell" in process.process_name:
            process_commandline = process_commandline.replace("{ip_address}",c2_ip)
            if self.obfuscation_techniques:
                process_commandline = obfuscate_string(self.obfuscation_techniques, process_commandline)

        # We don't want to permanently override the process commandline templates
        # So return a COPY of the process, with the C2 IP substituted
        return Process(
            process_name= process.process_name,
            process_commandline=process_commandline,
            process_hash=process.process_hash
        )
        
    @staticmethod
    def get_process_obj(process: dict) -> Process:
        """
        Take a process dict and load the corresponding
        Process object
        """
        process_args = process.get("process", None)
        return Process(
            process_name=process.get("name"),
            process_commandline=process_args
        )
        

    def __repr__(self) -> str:
        return f"""<Malware: {self.name}>
        Hashes: {self.hashes}
        FileNames: {self.filenames}"""
